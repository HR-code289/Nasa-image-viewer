# Importujemy niezbƒôdne biblioteki
import tkinter as tk  # Biblioteka do tworzenia graficznego interfejsu u≈ºytkownika (GUI)
from tkinter import messagebox, scrolledtext, filedialog  # Dodatkowe komponenty GUI (okna dialogowe, przewijane pole tekstowe)
from PIL import Image, ImageTk  # Biblioteka Pillow do obs≈Çugi obraz√≥w (otwieranie, manipulacja, wy≈õwietlanie)
import requests  # Biblioteka do wysy≈Çania ≈ºƒÖda≈Ñ HTTP (np. do API)
from io import BytesIO  # Modu≈Ç do obs≈Çugi strumieni bajt√≥w w pamiƒôci (np. dla danych obrazu)

# --- Klasa stylu do przechowywania wsp√≥lnych ustawie≈Ñ wyglƒÖdu ---
class Style:
    """
    Przechowuje wsp√≥lne ustawienia wyglƒÖdu dla aplikacji,
    aby zapewniƒá sp√≥jny interfejs u≈ºytkownika.
    """
    def __init__(self):
        self.BG_COLOR = "#000000"  # Kolor t≈Ça aplikacji (czarny - styl NASA)
        self.FG_COLOR = "#00ff00"  # Kolor tekstu (zielony - kontrastujƒÖcy i futurystyczny)
        self.FONT_FAMILY = "Consolas"  # Nazwa czcionki u≈ºywanej w ca≈Çej aplikacji
        self.FONT_SIZE = 12  # Standardowy rozmiar czcionki
        self.FONT_MAIN = (self.FONT_FAMILY, self.FONT_SIZE)  # Standardowa czcionka ( –∫–æ—Ä—Ç–µ–∂ )
        self.FONT_BOLD = (self.FONT_FAMILY, self.FONT_SIZE, "bold")  # Pogrubiona czcionka ( –∫–æ—Ä—Ç–µ–∂ )
        self.THUMBNAIL_SIZE = (150, 150)  # Rozmiar miniatur obraz√≥w ( –∫–æ—Ä—Ç–µ–∂ )
        self.COLUMNS = 7  # Liczba kolumn do wy≈õwietlania miniatur
        self.PAD_X = 5  # Padding (dope≈Çnienie) poziomy dla element√≥w interfejsu
        self.PAD_Y = 5  # Padding (dope≈Çnienie) pionowy dla element√≥w interfejsu
        # S≈Çownik z standardowymi opcjami 'pack' dla rozszerzania i wype≈Çniania
        self.EXPAND_FILL = dict(fill=tk.BOTH, expand=True, padx=self.PAD_X, pady=self.PAD_Y)

# --- Klasa loggera do wy≈õwietlania log√≥w w GUI ---
class Logger:
    """
    ZarzƒÖdza wy≈õwietlaniem komunikat√≥w (log√≥w) w dedykowanym polu tekstowym w GUI.
    """
    def __init__(self, parent, style):
        """
        Inicjalizuje komponent loggera.

        Args:
            parent (tk.Widget): Rodzicielski widget Tkinter, w kt√≥rym logger ma byƒá umieszczony.
            style (Style): Obiekt klasy Style z ustawieniami wyglƒÖdu.
        """
        # Tworzymy przewijane pole tekstowe do logowania zdarze≈Ñ
        self.log_box = scrolledtext.ScrolledText(
            parent,  # Widget nadrzƒôdny
            wrap=tk.WORD,  # Zawijanie tekstu na granicy s≈Ç√≥w
            bg=style.BG_COLOR,  # Kolor t≈Ça
            fg=style.FG_COLOR,  # Kolor tekstu
            font=(style.FONT_FAMILY, 10),  # Czcionka (mniejsza ni≈º standardowa)
            insertbackground=style.FG_COLOR,  # Kolor kursora w polu tekstowym
            width=30,  # Szeroko≈õƒá pola tekstowego
            height=25  # Wysoko≈õƒá pola tekstowego
        )
        # Umieszczamy pole tekstowe w rodzicu, u≈ºywajƒÖc wsp√≥lnych ustawie≈Ñ wype≈Çnienia
        self.log_box.pack(**style.EXPAND_FILL)

    def log(self, message):
        """
        Dodaje wiadomo≈õƒá do pola log√≥w i przewija widok do najnowszego wpisu.

        Args:
            message (str): Wiadomo≈õƒá do zalogowania.
        """
        self.log_box.insert(tk.END, message + "\n")  # Dodajemy wiadomo≈õƒá na ko≈Ñcu pola tekstowego
        self.log_box.see(tk.END)  # Automatycznie przewijamy do ostatniego wpisu

# --- G≈Ç√≥wna aplikacja NASA Viewer ---
class NASAImageViewer:
    """
    G≈Ç√≥wna klasa aplikacji do przeglƒÖdania obraz√≥w z API NASA.
    """
    def __init__(self, root_window):
        """
        Inicjalizuje g≈Ç√≥wne okno aplikacji i jego komponenty.

        Args:
            root_window (tk.Tk): G≈Ç√≥wne okno aplikacji Tkinter.
        """
        self.root = root_window  # Przypisanie g≈Ç√≥wnego okna
        self.root.title("NASA Image Viewer üåå")  # Ustawienie tytu≈Çu okna
        self.root.geometry("1000x600")  # Ustawienie poczƒÖtkowych wymiar√≥w okna

        self.style = Style()  # Inicjalizacja obiektu stylu
        self.root.configure(bg=self.style.BG_COLOR)  # Ustawiamy kolor t≈Ça g≈Ç√≥wnego okna

        self.setup_layout()  # Wywo≈Çanie metody budujƒÖcej interfejs u≈ºytkownika

    def _create_styled_frame(self, parent, **kwargs):
        """
        Tworzy ramkƒô (Frame) z domy≈õlnym t≈Çem ze stylu.

        Args:
            parent (tk.Widget): Rodzicielski widget.
            **kwargs: Dodatkowe argumenty przekazywane do konstruktora tk.Frame.

        Returns:
            tk.Frame: Nowo utworzona ramka.
        """
        # ≈ÅƒÖczymy domy≈õlny kolor t≈Ça z przekazanymi argumentami
        # Je≈õli 'bg' jest w kwargs, u≈ºyje warto≈õci z kwargs, w przeciwnym razie self.style.BG_COLOR
        frame_kwargs = {'bg': self.style.BG_COLOR, **kwargs}
        return tk.Frame(parent, **frame_kwargs)

    def _create_styled_label(self, parent, text, font=None, **kwargs):
        """
        Tworzy etykietƒô (Label) z domy≈õlnymi kolorami i czcionkƒÖ ze stylu.

        Args:
            parent (tk.Widget): Rodzicielski widget.
            text (str): Tekst etykiety.
            font (tuple, optional): Czcionka etykiety. Domy≈õlnie self.style.FONT_MAIN.
            **kwargs: Dodatkowe argumenty przekazywane do konstruktora tk.Label.

        Returns:
            tk.Label: Nowo utworzona etykieta.
        """
        if font is None:
            font = self.style.FONT_MAIN
        # ≈ÅƒÖczymy domy≈õlne kolory i czcionkƒô z przekazanymi argumentami
        label_kwargs = {
            'bg': self.style.BG_COLOR,
            'fg': self.style.FG_COLOR,
            'font': font,
            **kwargs
        }
        return tk.Label(parent, text=text, **label_kwargs)


    def setup_layout(self):
        """
        Konfiguruje uk≈Çad g≈Ç√≥wnych komponent√≥w interfejsu u≈ºytkownika.
        Dzieli okno na sekcjƒô wyszukiwania, sekcjƒô wynik√≥w i sekcjƒô log√≥w.
        """
        # --- Pasek wyszukiwania na g√≥rze okna ---
        top_frame = self._create_styled_frame(self.root) # U≈ºycie metody pomocniczej
        top_frame.pack(fill=tk.X, pady=10) # RozciƒÖgnij w poziomie, dodaj margines pionowy

        # Pole do wpisywania zapytania
        self.entry = tk.Entry(
            top_frame,
            width=50,
            bg=self.style.BG_COLOR,
            fg=self.style.FG_COLOR,
            insertbackground=self.style.FG_COLOR, # Kolor kursora
            font=self.style.FONT_MAIN
        )
        self.entry.pack(side=tk.LEFT, padx=10) # Umie≈õƒá po lewej stronie, dodaj margines poziomy

        # Przycisk wyszukiwania
        search_btn = tk.Button(
            top_frame,
            text="Szukaj üöÄ",
            command=self.search_images, # Funkcja wywo≈Çywana po klikniƒôciu
            bg="#1f1f1f",  # Ciemnoszary kolor t≈Ça przycisku
            fg=self.style.FG_COLOR,
            font=self.style.FONT_BOLD,
            activebackground="#003300",  # Kolor t≈Ça przycisku po najechaniu/klikniƒôciu
            activeforeground=self.style.FG_COLOR
        )
        search_btn.pack(side=tk.LEFT) # Umie≈õƒá po lewej stronie, obok pola tekstowego
        # PowiƒÖzanie naci≈õniƒôcia klawisza Enter w g≈Ç√≥wnym oknie z funkcjƒÖ wyszukiwania
        self.root.bind('<Return>', self.search_images)

        # --- G≈Ç√≥wna ramka z podzia≈Çem na wyniki i logi ---
        main_frame = self._create_styled_frame(self.root) # U≈ºycie metody pomocniczej
        main_frame.pack(**self.style.EXPAND_FILL) # RozciƒÖgnij i wype≈Çnij dostƒôpnƒÖ przestrze≈Ñ

        # --- Ramka na wyniki obraz√≥w (lewa strona) ---
        # bd to borderwidth (szeroko≈õƒá ramki), relief to styl ramki
        image_results_frame = self._create_styled_frame(main_frame, bd=2, relief=tk.GROOVE) # U≈ºycie metody pomocniczej
        image_results_frame.pack(side=tk.LEFT, **self.style.EXPAND_FILL)

        # Canvas jako kontener dla przewijalnej zawarto≈õci (obraz√≥w)
        self.canvas = tk.Canvas(image_results_frame, bg=self.style.BG_COLOR, highlightthickness=0) # highlightthickness=0 usuwa ramkƒô canvas
        self.canvas.pack(side=tk.LEFT, **self.style.EXPAND_FILL)

        # Pionowy pasek przewijania dla Canvas
        scrollbar = tk.Scrollbar(image_results_frame, orient="vertical", command=self.canvas.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y) # Umie≈õƒá po prawej, wype≈Çnij w pionie
        self.canvas.configure(yscrollcommand=scrollbar.set) # Po≈ÇƒÖcz pasek z Canvas

        # Ramka wewnƒôtrzna w Canvas, kt√≥ra bƒôdzie faktycznie zawieraƒá miniatury
        # Ta ramka bƒôdzie przewijana
        self.scrollable_frame = self._create_styled_frame(self.canvas) # U≈ºycie metody pomocniczej
        # Umie≈õƒá scrollable_frame wewnƒÖtrz Canvas
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw") # nw = north-west (lewy g√≥rny r√≥g)
        # Konfiguracja Canvas, aby region przewijania dopasowywa≈Ç siƒô do rozmiaru scrollable_frame
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )

        # --- Ramka na logi (prawa strona) ---
        log_frame = self._create_styled_frame(main_frame, bd=2, relief=tk.GROOVE, width=250) # U≈ºycie metody pomocniczej
        log_frame.pack(side=tk.RIGHT, fill=tk.Y) # Wype≈Çnij w pionie, nie rozszerzaj w poziomie
        log_frame.pack_propagate(False) # Zapobiega zmianie rozmiaru ramki przez jej zawarto≈õƒá

        # Etykieta nad polem log√≥w
        log_label = self._create_styled_label(log_frame, text="Akcje programu üõ∞Ô∏è", font=self.style.FONT_BOLD) # U≈ºycie metody pomocniczej
        log_label.pack(pady=self.style.PAD_Y)

        self.logger = Logger(log_frame, self.style)  # Inicjalizacja obiektu loggera w ramce log_frame

    def search_images(self, event=None):
        """
        Pobiera zapytanie u≈ºytkownika, wyszukuje obrazy za pomocƒÖ API NASA
        i wy≈õwietla miniatury wynik√≥w.
        Parametr 'event' jest potrzebny, gdy funkcja jest wywo≈Çywana przez powiƒÖzanie zdarzenia (np. Enter).
        """
        query = self.entry.get().strip()  # Pobieramy zapytanie z pola tekstowego i usuwamy bia≈Çe znaki
        if not query:
            messagebox.showwarning("Uwaga", "Wpisz zapytanie przed wyszukiwaniem!")
            self.logger.log("Pr√≥ba wyszukiwania bez zapytania.")
            return

        self.logger.log(f"Rozpoczynam wyszukiwanie dla: '{query}'")

        # Czyszczenie poprzednich wynik√≥w z scrollable_frame
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

        # Etykieta "Wyniki:" nad miniaturami
        results_label = self._create_styled_label(
            self.scrollable_frame,
            text="Wyniki:",
            font=(self.style.FONT_FAMILY, 14, "bold")
        )
        results_label.grid(row=0, column=0, columnspan=self.style.COLUMNS, pady=self.style.PAD_Y, sticky="w") # sticky="w" (west) wyr√≥wnuje do lewej

        try:
            # Pobieranie danych z API NASA
            data = self.fetch_nasa_images(query)
            # Wyodrƒôbnianie listy element√≥w (obraz√≥w) z odpowiedzi JSON
            # .get zapewnia bezpieczny dostƒôp, zwracajƒÖc pusty s≈Çownik/listƒô je≈õli klucz nie istnieje
            items = data.get("collection", {}).get("items", [])

            if not items:
                self.logger.log(f"Brak wynik√≥w dla zapytania: '{query}'.")
                no_results_label = self._create_styled_label(self.scrollable_frame, text="Brak wynik√≥w.")
                no_results_label.grid(row=1, column=0, columnspan=self.style.COLUMNS, pady=self.style.PAD_Y)
                return

            self.logger.log(f"Znaleziono {len(items)} element√≥w. Wy≈õwietlam do 30.")
            row, col = 1, 0 # Zaczynamy od wiersza 1, bo wiersz 0 jest dla etykiety "Wyniki:"
            # Iterujemy przez pierwsze 30 znalezionych element√≥w
            for item_index, item in enumerate(items[:30]):
                # Dostƒôp do link√≥w i danych obrazu, z domy≈õlnymi warto≈õciami na wypadek braku danych
                links = item.get("links", [])
                data_info_list = item.get("data", []) # 'data' to lista w API NASA

                # Tytu≈Ç obrazu, je≈õli istnieje
                title = "Bez tytu≈Çu"
                if data_info_list: # Sprawdzamy czy lista data_info_list nie jest pusta
                    # Zak≈Çadamy, ≈ºe interesuje nas pierwszy element listy 'data'
                    title = data_info_list[0].get("title", "Bez tytu≈Çu")

                # Sprawdzamy, czy sƒÖ dostƒôpne linki do obrazu
                if links:
                    # Zak≈Çadamy, ≈ºe pierwszy link to miniatura lub obraz do wy≈õwietlenia
                    img_url = links[0].get("href", "")
                    if img_url and img_url.endswith(('.png', '.jpg', '.jpeg', '.gif')): # Prosta walidacja URL obrazu
                        try:
                            # Pobieranie danych obrazu z URL
                            response = requests.get(img_url, timeout=10) # Dodano timeout
                            response.raise_for_status() # Rzuci wyjƒÖtkiem dla z≈Çych status√≥w HTTP
                            img_data = response.content

                            # Tworzenie obiektu obrazu PIL z pobranych danych
                            img = Image.open(BytesIO(img_data))
                            img.thumbnail(self.style.THUMBNAIL_SIZE) # Zmniejszanie obrazu do rozmiaru miniatury
                            img_tk = ImageTk.PhotoImage(img) # Konwersja obrazu PIL na format Tkinter

                            # Tworzenie etykiety (panelu) do wy≈õwietlenia miniatury
                            # cursor="hand2" zmienia kursor na "rƒÖczkƒô" po najechaniu
                            panel = tk.Label(self.scrollable_frame, image=img_tk, bg=self.style.BG_COLOR, cursor="hand2")
                            panel.image = img_tk  # Wa≈ºne: zachowaj referencjƒô do obrazu, aby nie zosta≈Ç "usuniƒôty przez garbage collector"
                            panel.grid(row=row, column=col, padx=self.style.PAD_X, pady=self.style.PAD_Y)

                            # Tworzenie etykiety z tytu≈Çem pod miniaturƒÖ
                            title_label = self._create_styled_label(
                                self.scrollable_frame,
                                text=title,
                                font=(self.style.FONT_FAMILY, 10), # Mniejsza czcionka dla tytu≈Çu
                                wraplength=self.style.THUMBNAIL_SIZE[0] # Zawijanie tekstu do szeroko≈õci miniatury
                            )
                            title_label.grid(row=row + 1, column=col, padx=self.style.PAD_X, pady=self.style.PAD_Y, sticky="n") # sticky="n" (north)

                            # PowiƒÖzanie zdarze≈Ñ klikniƒôcia myszƒÖ z panelem miniatury
                            # Lewy przycisk myszy (<Button-1>): poka≈º pe≈Çny obraz
                            panel.bind("<Button-1>", lambda e, url=img_url, t=title: self.show_full_image(url, t))
                            # Prawy przycisk myszy (<Button-3> na Windows/Linux, <Button-2> na macOS): poka≈º opcjƒô zapisu
                            panel.bind("<Button-3>", lambda e, url=img_url, t=title: self.save_image_prompt(url, t))
                            panel.bind("<Button-2>", lambda e, url=img_url, t=title: self.save_image_prompt(url, t)) # Dla macOS

                            col += 1 # Przej≈õcie do nastƒôpnej kolumny
                            if col >= self.style.COLUMNS: # Je≈õli osiƒÖgniƒôto limit kolumn
                                col = 0 # Wr√≥ƒá do pierwszej kolumny
                                row += 2 # Przejd≈∫ do nastƒôpnego wiersza (wiersz na obraz + wiersz na tytu≈Ç)
                        except requests.exceptions.RequestException as e:
                            self.logger.log(f"B≈ÇƒÖd sieciowy podczas ≈Çadowania miniatury {img_url}: {e}")
                        except UnidentifiedImageError: # Z≈Çap b≈ÇƒÖd je≈õli PIL nie rozpozna formatu obrazu
                            self.logger.log(f"Nie mo≈ºna zidentyfikowaƒá formatu obrazu: {img_url}")
                        except Exception as e:
                            self.logger.log(f"B≈ÇƒÖd ≈Çadowania miniatury {img_url}: {e}")
                    else:
                        self.logger.log(f"BrakujƒÖcy lub nieprawid≈Çowy URL obrazu w elemencie {item_index}.")
                else:
                    self.logger.log(f"Brak link√≥w w elemencie {item_index}.")
            if row == 1 and col == 0 : # Je≈õli nie dodano ≈ºadnych poprawnych miniatur
                self.logger.log("Nie uda≈Ço siƒô za≈Çadowaƒá ≈ºadnej miniatury z dostƒôpnych danych.")
                no_valid_images_label = self._create_styled_label(self.scrollable_frame, text="Brak poprawnych obraz√≥w do wy≈õwietlenia.")
                no_valid_images_label.grid(row=1, column=0, columnspan=self.style.COLUMNS, pady=self.style.PAD_Y)


        except requests.exceptions.RequestException as e: # B≈ÇƒÖd po≈ÇƒÖczenia z API
            self.logger.log(f"B≈ÇƒÖd po≈ÇƒÖczenia z API NASA: {e}")
            messagebox.showerror("B≈ÇƒÖd API", f"Nie uda≈Ço siƒô po≈ÇƒÖczyƒá z API NASA: {e}")
        except Exception as e: # Inne nieoczekiwane b≈Çƒôdy
            self.logger.log(f"Nieoczekiwany b≈ÇƒÖd podczas wyszukiwania: {e}")
            messagebox.showerror("B≈ÇƒÖd krytyczny", f"WystƒÖpi≈Ç nieoczekiwany b≈ÇƒÖd: {e}")

    def fetch_nasa_images(self, query):
        """
        Pobiera dane obraz√≥w z API NASA na podstawie zapytania.

        Args:
            query (str): S≈Çowo kluczowe do wyszukania w API NASA.

        Returns:
            dict: Odpowied≈∫ JSON z API jako s≈Çownik.

        Raises:
            requests.exceptions.RequestException: Je≈õli wystƒÖpi b≈ÇƒÖd podczas ≈ºƒÖdania HTTP.
            Exception: Je≈õli status odpowiedzi nie jest 200.
        """
        url = "https://images-api.nasa.gov/search"
        params = {'q': query, 'media_type': 'image'} # Parametry zapytania: zapytanie i typ medi√≥w (obraz)
        self.logger.log(f"Wysy≈Çanie ≈ºƒÖdania do API: {url} z parametrami: {params}")
        response = requests.get(url, params=params, timeout=15) # Dodano timeout
        response.raise_for_status() # Rzuci wyjƒÖtkiem dla kod√≥w b≈Çƒôd√≥w HTTP (4xx lub 5xx)
        self.logger.log(f"Otrzymano odpowied≈∫ od API, status: {response.status_code}")
        return response.json() # Zwraca sparsowanƒÖ odpowied≈∫ JSON

    def _load_image_from_url(self, img_url, title_for_log=""):
        """
        Pobiera i otwiera obraz z podanego URL.

        Args:
            img_url (str): URL obrazu.
            title_for_log (str, optional): Tytu≈Ç obrazu u≈ºywany w logach.

        Returns:
            Image.Image or None: Obiekt obrazu PIL lub None w przypadku b≈Çƒôdu.
        """
        try:
            self.logger.log(f"Pobieranie pe≈Çnego obrazu: {title_for_log if title_for_log else img_url.split('/')[-1]}")
            response = requests.get(img_url, timeout=20) # D≈Çu≈ºszy timeout dla pe≈Çnych obraz√≥w
            response.raise_for_status()
            img_data = response.content
            img = Image.open(BytesIO(img_data))
            return img
        except requests.exceptions.RequestException as e:
            self.logger.log(f"B≈ÇƒÖd sieciowy podczas ≈Çadowania obrazu '{title_for_log}': {e}")
            messagebox.showerror("B≈ÇƒÖd sieciowy", f"Nie uda≈Ço siƒô pobraƒá obrazu: {e}")
        except UnidentifiedImageError:
            self.logger.log(f"Nie mo≈ºna zidentyfikowaƒá formatu obrazu: {img_url}")
            messagebox.showerror("B≈ÇƒÖd obrazu", "Nie uda≈Ço siƒô otworzyƒá obrazu (nieznany format).")
        except Exception as e:
            self.logger.log(f"B≈ÇƒÖd otwierania obrazu '{title_for_log}': {e}")
            messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô za≈Çadowaƒá obrazu '{title_for_log}'.")
        return None

    def show_full_image(self, img_url, title=""):
        """
        Wy≈õwietla pe≈Çnowymiarowy obraz w nowym oknie (Toplevel).

        Args:
            img_url (str): URL obrazu do wy≈õwietlenia.
            title (str, optional): Tytu≈Ç obrazu, wy≈õwietlany pod obrazem.
        """
        img = self._load_image_from_url(img_url, title)
        if img is None:
            return

        try:
            # Utworzenie nowego okna (popup)
            popup = tk.Toplevel(self.root)
            popup.title(f"PodglƒÖd: {title if title else 'Obraz'} üõ∏")
            popup.configure(bg=self.style.BG_COLOR)

            # Dostosowanie rozmiaru obrazu, je≈õli jest zbyt du≈ºy dla ekranu
            # Przyk≈Çadowe ograniczenie do 80% szeroko≈õci i wysoko≈õci ekranu g≈Ç√≥wnego
            max_width = int(self.root.winfo_screenwidth() * 0.8)
            max_height = int(self.root.winfo_screenheight() * 0.8)

            if img.width > max_width or img.height > max_height:
                img.thumbnail((max_width, max_height), Image.Resampling.LANCZOS) # Lepsza jako≈õƒá skalowania

            img_tk = ImageTk.PhotoImage(img) # Konwersja na format Tkinter

            # Etykieta do wy≈õwietlenia obrazu
            image_label = tk.Label(popup, image=img_tk, bg=self.style.BG_COLOR)
            image_label.image = img_tk  # Zachowaj referencjƒô!
            image_label.pack(padx=10, pady=10)

            # Etykieta z tytu≈Çem pod obrazem, je≈õli tytu≈Ç istnieje
            if title:
                title_label_popup = self._create_styled_label(popup, text=title, font=self.style.FONT_BOLD)
                title_label_popup.pack(pady=5)

            self.logger.log(f"Otworzono podglƒÖd obrazu: {title if title else img_url.split('/')[-1]}")

        except Exception as e: # Og√≥lny b≈ÇƒÖd na wypadek problem√≥w z Tkinter lub innymi operacjami
            self.logger.log(f"B≈ÇƒÖd wy≈õwietlania pe≈Çnego obrazu '{title}': {e}")
            messagebox.showerror("B≈ÇƒÖd wy≈õwietlania", f"Nie uda≈Ço siƒô wy≈õwietliƒá obrazu '{title}'.")


    def save_image_prompt(self, img_url, title):
        """
        Wy≈õwietla okno dialogowe "Zapisz jako" i zapisuje obraz, je≈õli u≈ºytkownik wybierze lokalizacjƒô.

        Args:
            img_url (str): URL obrazu do zapisania.
            title (str): Sugerowana nazwa pliku (tytu≈Ç obrazu).
        """
        # Sugerowana nazwa pliku, oczyszczona z niebezpiecznych znak√≥w (prosta wersja)
        safe_title = "".join(c if c.isalnum() or c in (' ', '_', '-') else '_' for c in title)
        default_filename = f"{safe_title}.jpg" if safe_title else "nasa_image.jpg"

        # Otwarcie systemowego okna dialogowego "Zapisz jako"
        filename = filedialog.asksaveasfilename(
            parent=self.root, # Okno nadrzƒôdne dla dialogu
            defaultextension=".jpg", # Domy≈õlne rozszerzenie pliku
            filetypes=[("JPEG", "*.jpg"), ("PNG", "*.png"), ("Wszystkie pliki", "*.*")], # Dostƒôpne typy plik√≥w
            initialfile=default_filename, # Sugerowana poczƒÖtkowa nazwa pliku
            title="Zapisz obraz jako..."
        )

        # Je≈õli u≈ºytkownik wybra≈Ç nazwƒô pliku (nie anulowa≈Ç dialogu)
        if filename:
            img = self._load_image_from_url(img_url, title)
            if img:
                try:
                    # Zapis obrazu PIL do wybranego pliku
                    # Format jest zwykle dedukowany z rozszerzenia, ale mo≈ºna go podaƒá jawnie
                    img.save(filename)
                    self.logger.log(f"Zapisano obraz: {filename}")
                    messagebox.showinfo("Sukces", f"Obraz zapisany jako: {filename}")
                except Exception as e:
                    self.logger.log(f"B≈ÇƒÖd zapisu obrazu '{title}' do pliku {filename}: {e}")
                    messagebox.showerror("B≈ÇƒÖd zapisu", f"Nie uda≈Ço siƒô zapisaƒá obrazu: {e}")
        else:
            self.logger.log("Anulowano zapis obrazu.")


# --- Uruchomienie aplikacji ---
if __name__ == "__main__":
    # Utworzenie g≈Ç√≥wnego okna aplikacji Tkinter
    root = tk.Tk()
    # Utworzenie instancji naszej aplikacji
    app = NASAImageViewer(root)
    # Uruchomienie g≈Ç√≥wnej pƒôtli zdarze≈Ñ Tkinter, kt√≥ra utrzymuje okno otwarte i reaguje na akcje u≈ºytkownika
    root.mainloop()

